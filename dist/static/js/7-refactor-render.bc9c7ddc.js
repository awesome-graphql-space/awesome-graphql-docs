(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"./docs/7-refactor-render.mdx":function(e,n,t){"use strict";t.r(n);var a=t("./node_modules/react/index.js"),o=t.n(a),r=t("./node_modules/@mdx-js/tag/dist/index.js"),i=t("./components/code.js");function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}n.default=function(e){var n=e.components;s(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"refactor-render"}},"Refactor Render"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Right now in our render function we are getting plenty of things from the state and calling it as ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"this.state.key")," and this can get pretty messy after a while so it would be a good idea to get the keys that we actually use and deconstruct it from the state."),o.a.createElement(r.MDXTag,{name:"p",components:n},"This will make our code more readable and maintainable once you get more and more things from the state."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Right now our render function looks like this:"),o.a.createElement(i.a,{code:'\nrender() {\n  return (\n    <main>\n      <section className="cat-wrapper">\n        <h1>Choose your favorite cats</h1>\n        <section className="cat-container">\n          <figure>\n            <img\n              className="cat-image"\n              src={this.state.currentCat}\n              alt="A awesome akita cat"\n            />\n          </figure>\n          <ul className="cat-actions">\n            <li>\n              <button\n                onClick={() => this.favoriteCat(this.state.currentCat)}\n                className="heart-icon"\n              >\n                <GoHeart size="30" color="#f44336" />\n              </button>\n            </li>\n            <li>\n              <button onClick={this.getCat}>\n                <GoArrowRight size="30" />\n              </button>\n            </li>\n          </ul>\n        </section>\n        <ul className="favorite-cats">\n          {this.state.favoriteCats.map((cat, index) => (\n            <li>\n              <img class="favorite-cat" src={cat} alt="favorited cat" />\n              <button onClick={() => this.removeFavorite(index)}>\n                <GoTrashcan size="20" />\n              </button>\n            </li>\n          ))}\n        </ul>\n      </section>\n    </main>\n  );\n}\n'}),o.a.createElement(r.MDXTag,{name:"p",components:n},"One thing that we can do here is extract ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"currentCat")," and ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"favoriteCats")," from the state using ES6 deconstruction like this:"),o.a.createElement(i.a,{code:"\nconst { currentCat, favoriteCats } = this.state;\n"}),o.a.createElement(r.MDXTag,{name:"p",components:n},"This means that now we can target these pieces of state by only using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"currentCat")," and ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"favoriteCats"),". Our render will now look like:"),o.a.createElement(i.a,{code:'\nrender() {\n  const { currentCat, favoriteCats } = this.state;\n  return (\n    <main>\n      <section className="cat-wrapper">\n        <h1>Choose your favorite cats</h1>\n        <section className="cat-container">\n          <figure>\n            <img\n              className="cat-image"\n              src={currentCat}\n              alt="A awesome akita cat"\n            />\n          </figure>\n          <ul className="cat-actions">\n            <li>\n              <button\n                onClick={() => this.favoriteCat(currentCat)}\n                className="heart-icon"\n              >\n                <GoHeart size="30" color="#f44336" />\n              </button>\n            </li>\n            <li>\n              <button onClick={this.getCat}>\n                <GoArrowRight size="30" />\n              </button>\n            </li>\n          </ul>\n        </section>\n        <ul className="favorite-cats">\n          {favoriteCats.map((cat, index) => (\n            <li>\n              <img class="favorite-cat" src={cat} alt="favorited cat" />\n              <button onClick={() => this.removeFavorite(index)}>\n                <GoTrashcan size="20" />\n              </button>\n            </li>\n          ))}\n        </ul>\n      </section>\n    </main>\n  );\n}\n'}),o.a.createElement(r.MDXTag,{name:"p",components:n},"And now our render function is completely separated from our state."))}}}]);