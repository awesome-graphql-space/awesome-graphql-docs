(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"./docs/9-disable-like.mdx":function(e,t,n){"use strict";n.r(t);var a=n("./node_modules/react/index.js"),o=n.n(a),i=n("./node_modules/@mdx-js/tag/dist/index.js"),r=n("./components/code.js");function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}t.default=function(e){var t=e.components;c(e,["components"]);return o.a.createElement(i.MDXTag,{name:"wrapper",components:t},o.a.createElement(i.MDXTag,{name:"h1",components:t,props:{id:"disable-like"}},"Disable Like"),o.a.createElement(i.MDXTag,{name:"p",components:t},"A small bug we have with our application right now is that we can like the same cat twice and that shouldn't be allowed. We can fix this by adding a disabled attribute to the button and attach it to a function that will run every time our render function runs."),o.a.createElement(i.MDXTag,{name:"p",components:t},"To do this let's attach the function and then create it:"),o.a.createElement(r.a,{code:'\n<button\n  className="heart-icon"\n  disabled={this.catInFavorites(currentCat)}\n  onClick={() => this.favoriteCat(currentCat)}\n>\n  <GoHeart size="30" color="#f44336" />\n</button>\n'}),o.a.createElement(i.MDXTag,{name:"p",components:t},"As you can see we are not calling the function as a callback here and that is because in this case we do want it to run on page render and also on every update to make sure that we are disabling the button correctly."),o.a.createElement(i.MDXTag,{name:"h2",components:t,props:{id:"write-the-function"}},"Write the function"),o.a.createElement(i.MDXTag,{name:"p",components:t},"What we want to do is check if the current cat being shown in the big image is already in the array of ",o.a.createElement(i.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"favoriteCats"),". If we think about it we want to disable the button when the array already contains that cat and leave it enabled when that is not happening. In ES6 we got a new function in the array method called exactly that:"),o.a.createElement(r.a,{code:"\n  catInFavorites = cat => this.state.favoriteCats.includes(cat)\n"}),o.a.createElement(i.MDXTag,{name:"p",components:t},"This function will return false when the cat as yet not been added and true when it has and that will make our button disabled \ud83c\udf89"))}}}]);