{"remainingRequest":"/Users/manjuladube/Documents/linaframework-docs/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/manjuladube/Documents/linaframework-docs/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/manjuladube/Documents/linaframework-docs/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheDirectory\":true,\"cacheCompression\":true,\"compact\":true}!/Users/manjuladube/Documents/linaframework-docs/docs/7-refactor-render.mdx","dependencies":[{"path":"/Users/manjuladube/Documents/linaframework-docs/docs/7-refactor-render.mdx","mtime":1542312328000},{"path":"/Users/manjuladube/Documents/linaframework-docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/manjuladube/Documents/linaframework-docs/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}import React from'react';import{MDXTag}from'@mdx-js/tag';import Code from'../components/code';export default(function(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"refactor-render\"}},\"Refactor Render\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Right now in our render function we are getting plenty of things from the state and calling it as \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"this.state.key\"),\" and this can get pretty messy after a while so it would be a good idea to get the keys that we actually use and deconstruct it from the state.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"This will make our code more readable and maintainable once you get more and more things from the state.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Right now our render function looks like this:\"),React.createElement(Code,{code:\"\\nrender() {\\n  return (\\n    <main>\\n      <section className=\\\"cat-wrapper\\\">\\n        <h1>Choose your favorite cats</h1>\\n        <section className=\\\"cat-container\\\">\\n          <figure>\\n            <img\\n              className=\\\"cat-image\\\"\\n              src={this.state.currentCat}\\n              alt=\\\"A awesome akita cat\\\"\\n            />\\n          </figure>\\n          <ul className=\\\"cat-actions\\\">\\n            <li>\\n              <button\\n                onClick={() => this.favoriteCat(this.state.currentCat)}\\n                className=\\\"heart-icon\\\"\\n              >\\n                <GoHeart size=\\\"30\\\" color=\\\"#f44336\\\" />\\n              </button>\\n            </li>\\n            <li>\\n              <button onClick={this.getCat}>\\n                <GoArrowRight size=\\\"30\\\" />\\n              </button>\\n            </li>\\n          </ul>\\n        </section>\\n        <ul className=\\\"favorite-cats\\\">\\n          {this.state.favoriteCats.map((cat, index) => (\\n            <li>\\n              <img class=\\\"favorite-cat\\\" src={cat} alt=\\\"favorited cat\\\" />\\n              <button onClick={() => this.removeFavorite(index)}>\\n                <GoTrashcan size=\\\"20\\\" />\\n              </button>\\n            </li>\\n          ))}\\n        </ul>\\n      </section>\\n    </main>\\n  );\\n}\\n\"}),React.createElement(MDXTag,{name:\"p\",components:components},\"One thing that we can do here is extract \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"currentCat\"),\" and \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"favoriteCats\"),\" from the state using ES6 deconstruction like this:\"),React.createElement(Code,{code:\"\\nconst { currentCat, favoriteCats } = this.state;\\n\"}),React.createElement(MDXTag,{name:\"p\",components:components},\"This means that now we can target these pieces of state by only using \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"currentCat\"),\" and \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"favoriteCats\"),\". Our render will now look like:\"),React.createElement(Code,{code:\"\\nrender() {\\n  const { currentCat, favoriteCats } = this.state;\\n  return (\\n    <main>\\n      <section className=\\\"cat-wrapper\\\">\\n        <h1>Choose your favorite cats</h1>\\n        <section className=\\\"cat-container\\\">\\n          <figure>\\n            <img\\n              className=\\\"cat-image\\\"\\n              src={currentCat}\\n              alt=\\\"A awesome akita cat\\\"\\n            />\\n          </figure>\\n          <ul className=\\\"cat-actions\\\">\\n            <li>\\n              <button\\n                onClick={() => this.favoriteCat(currentCat)}\\n                className=\\\"heart-icon\\\"\\n              >\\n                <GoHeart size=\\\"30\\\" color=\\\"#f44336\\\" />\\n              </button>\\n            </li>\\n            <li>\\n              <button onClick={this.getCat}>\\n                <GoArrowRight size=\\\"30\\\" />\\n              </button>\\n            </li>\\n          </ul>\\n        </section>\\n        <ul className=\\\"favorite-cats\\\">\\n          {favoriteCats.map((cat, index) => (\\n            <li>\\n              <img class=\\\"favorite-cat\\\" src={cat} alt=\\\"favorited cat\\\" />\\n              <button onClick={() => this.removeFavorite(index)}>\\n                <GoTrashcan size=\\\"20\\\" />\\n              </button>\\n            </li>\\n          ))}\\n        </ul>\\n      </section>\\n    </main>\\n  );\\n}\\n\"}),React.createElement(MDXTag,{name:\"p\",components:components},\"And now our render function is completely separated from our state.\"));});",{"version":3,"sources":["/Users/manjuladube/Documents/linaframework-docs/docs/7-refactor-render.mdx"],"names":["React","MDXTag","Code","components","props"],"mappings":"wsBACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,MAAT,KAAuB,aAAvB,CACA,MAAOC,CAAAA,IAAP,KAAiB,oBAAjB,CAEF,eAAe,kBAAEC,CAAAA,UAAF,MAAEA,UAAF,CAAiBC,KAAjB,qDAA4B,qBAAC,MAAD,EAAQ,IAAI,CAAC,SAAb,CAAwB,UAAU,CAAED,UAApC,EAC3C,oBAAC,MAAD,EAAQ,IAAI,CAAC,IAAb,CAAkB,UAAU,CAAEA,UAA9B,CAA0C,KAAK,CAAE,CAAC,KAAK,iBAAN,CAAjD,oBAD2C,CAE3C,oBAAC,MAAD,EAAQ,IAAI,CAAC,GAAb,CAAiB,UAAU,CAAEA,UAA7B,uGAA+I,oBAAC,MAAD,EAAQ,IAAI,CAAC,YAAb,CAA0B,UAAU,CAAEA,UAAtC,CAAkD,UAAU,CAAC,GAA7D,mBAA/I,mJAF2C,CAG3C,oBAAC,MAAD,EAAQ,IAAI,CAAC,GAAb,CAAiB,UAAU,CAAEA,UAA7B,6GAH2C,CAI3C,oBAAC,MAAD,EAAQ,IAAI,CAAC,GAAb,CAAiB,UAAU,CAAEA,UAA7B,mDAJ2C,CAK3C,oBAAC,IAAD,EAAM,IAAI,yxCAAV,EAL2C,CAkD3C,oBAAC,MAAD,EAAQ,IAAI,CAAC,GAAb,CAAiB,UAAU,CAAEA,UAA7B,8CAAsF,oBAAC,MAAD,EAAQ,IAAI,CAAC,YAAb,CAA0B,UAAU,CAAEA,UAAtC,CAAkD,UAAU,CAAC,GAA7D,eAAtF,SAAuL,oBAAC,MAAD,EAAQ,IAAI,CAAC,YAAb,CAA0B,UAAU,CAAEA,UAAtC,CAAkD,UAAU,CAAC,GAA7D,iBAAvL,uDAlD2C,CAmD3C,oBAAC,IAAD,EAAM,IAAI,uDAAV,EAnD2C,CAsD3C,oBAAC,MAAD,EAAQ,IAAI,CAAC,GAAb,CAAiB,UAAU,CAAEA,UAA7B,2EAAmH,oBAAC,MAAD,EAAQ,IAAI,CAAC,YAAb,CAA0B,UAAU,CAAEA,UAAtC,CAAkD,UAAU,CAAC,GAA7D,eAAnH,SAAoN,oBAAC,MAAD,EAAQ,IAAI,CAAC,YAAb,CAA0B,UAAU,CAAEA,UAAtC,CAAkD,UAAU,CAAC,GAA7D,iBAApN,oCAtD2C,CAuD3C,oBAAC,IAAD,EAAM,IAAI,4yCAAV,EAvD2C,CAqG3C,oBAAC,MAAD,EAAQ,IAAI,CAAC,GAAb,CAAiB,UAAU,CAAEA,UAA7B,wEArG2C,CAA5B,EAAf","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import Code from '../components/code'\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\"  components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"refactor-render\"}}>{`Refactor Render`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Right now in our render function we are getting plenty of things from the state and calling it as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`this.state.key`}</MDXTag>{` and this can get pretty messy after a while so it would be a good idea to get the keys that we actually use and deconstruct it from the state.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This will make our code more readable and maintainable once you get more and more things from the state.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Right now our render function looks like this:`}</MDXTag>\n<Code code={`\nrender() {\n  return (\n    <main>\n      <section className=\"cat-wrapper\">\n        <h1>Choose your favorite cats</h1>\n        <section className=\"cat-container\">\n          <figure>\n            <img\n              className=\"cat-image\"\n              src={this.state.currentCat}\n              alt=\"A awesome akita cat\"\n            />\n          </figure>\n          <ul className=\"cat-actions\">\n            <li>\n              <button\n                onClick={() => this.favoriteCat(this.state.currentCat)}\n                className=\"heart-icon\"\n              >\n                <GoHeart size=\"30\" color=\"#f44336\" />\n              </button>\n            </li>\n            <li>\n              <button onClick={this.getCat}>\n                <GoArrowRight size=\"30\" />\n              </button>\n            </li>\n          </ul>\n        </section>\n        <ul className=\"favorite-cats\">\n          {this.state.favoriteCats.map((cat, index) => (\n            <li>\n              <img class=\"favorite-cat\" src={cat} alt=\"favorited cat\" />\n              <button onClick={() => this.removeFavorite(index)}>\n                <GoTrashcan size=\"20\" />\n              </button>\n            </li>\n          ))}\n        </ul>\n      </section>\n    </main>\n  );\n}\n`}/>\n<MDXTag name=\"p\" components={components}>{`One thing that we can do here is extract `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`currentCat`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`favoriteCats`}</MDXTag>{` from the state using ES6 deconstruction like this:`}</MDXTag>\n<Code code={`\nconst { currentCat, favoriteCats } = this.state;\n`}/>\n<MDXTag name=\"p\" components={components}>{`This means that now we can target these pieces of state by only using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`currentCat`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`favoriteCats`}</MDXTag>{`. Our render will now look like:`}</MDXTag>\n<Code code={`\nrender() {\n  const { currentCat, favoriteCats } = this.state;\n  return (\n    <main>\n      <section className=\"cat-wrapper\">\n        <h1>Choose your favorite cats</h1>\n        <section className=\"cat-container\">\n          <figure>\n            <img\n              className=\"cat-image\"\n              src={currentCat}\n              alt=\"A awesome akita cat\"\n            />\n          </figure>\n          <ul className=\"cat-actions\">\n            <li>\n              <button\n                onClick={() => this.favoriteCat(currentCat)}\n                className=\"heart-icon\"\n              >\n                <GoHeart size=\"30\" color=\"#f44336\" />\n              </button>\n            </li>\n            <li>\n              <button onClick={this.getCat}>\n                <GoArrowRight size=\"30\" />\n              </button>\n            </li>\n          </ul>\n        </section>\n        <ul className=\"favorite-cats\">\n          {favoriteCats.map((cat, index) => (\n            <li>\n              <img class=\"favorite-cat\" src={cat} alt=\"favorited cat\" />\n              <button onClick={() => this.removeFavorite(index)}>\n                <GoTrashcan size=\"20\" />\n              </button>\n            </li>\n          ))}\n        </ul>\n      </section>\n    </main>\n  );\n}\n`}/>\n<MDXTag name=\"p\" components={components}>{`And now our render function is completely separated from our state.`}</MDXTag></MDXTag>\n  "]}]}