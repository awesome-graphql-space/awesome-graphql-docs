{"remainingRequest":"/Users/manjuladube/Documents/linaframework-docs/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/manjuladube/Documents/linaframework-docs/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/manjuladube/Documents/linaframework-docs/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/manjuladube/Documents/linaframework-docs/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheDirectory\":true,\"cacheCompression\":false,\"compact\":false}!/Users/manjuladube/Documents/linaframework-docs/docs/4-get-cat.mdx","dependencies":[{"path":"/Users/manjuladube/Documents/linaframework-docs/docs/4-get-cat.mdx","mtime":1542312328000},{"path":"/Users/manjuladube/Documents/linaframework-docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/manjuladube/Documents/linaframework-docs/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/manjuladube/Documents/linaframework-docs/docs/4-get-cat.mdx\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\nimport Code from '../components/code';\n\nvar _default = function _default(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \"The only endpoint we care about is the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \"/cat\"), \" that will give us a random cat for each API call we make.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://www.catis.life/cat\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"https://www.catis.life/cat\")), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"call-this-api\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Call this API\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"For this we are going to use the \", React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://developers.google.com/web/updates/2015/03/introduction-to-fetch\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"fetch API\"), \" and get our data from the API we said at the top. So let's create a function to do that in our \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"index.js\")), React.createElement(Code, {\n    code: \"\\nclass App extends React.Component {\\n  getCat = () => {\\n    fetch(\\\"https://www.catis.life/cat\\\")\\n      .then(data => data.json())\\n      .then(rsp => this.setState({ cat: rsp.cat }));\\n  };\\n  \\n\\n  ....\\n}\\n\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"What we did here is that we create a function using the arrow syntax so that this is automatically binded to the class and we can set the state of our application inside of it.\"), React.createElement(Code, {\n    code: \"\\n    fetch(\\\"https://www.catis.life/cat\\\")\\n      .then(data => data.json())\\n      .then(rsp => this.setState({ currentCat: rsp.cat }));\\n\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"After we call the fetch we then transform what we receive to json to use it better in our app and once that is done we use a function called setState.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"What this function does is that is changes the state of our component and in this case the component is our whole App.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"But as you can see we have no state defined and in these cases we should always have a base state to be able to update it without a problem.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"To add state to our file add this before the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"getCat\"), \" function:\"), React.createElement(Code, {\n    code: \"\\n  state = {\\n    currentCat: null\\n  };\\n\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"This will tell React that it should start with that part of the state as null and we will manipulate it later and we do it by assigning it to the image url we get from the API.\"), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"call-the-getcat-on-page-load\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Call the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"getCat\"), \" on page load\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"So we have a function but so far we are not actually calling it anywhere so we don't actually have that cat image url.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"To fully grasp this you should know that React has lifecycle methods and this means you can run functions on several moments of the component creation and life.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"You can check out the \", React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://reactjs.org/docs/react-component.html#the-component-lifecycle\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"docs\"), \" for a full list of all the lifecycle methods available but for now let's talk about three:\"), React.createElement(MDXTag, {\n    name: \"ul\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"li\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"componentDidMount\"), \" - is invoked immediately after a component is mounted. If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"li\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"componentDidUpdate\"), \" - is invoked immediately after updating occurs. This method is not called for the initial render.\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"li\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"componentWillUnmount\"), \" -  is invoked immediately before a component is unmounted and destroyed.\")), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"As you can see from this description what we want for this case is \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"componentDidMount\"), \" and inside of it we call the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"getCat\"), \" we created.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"After the function we create our lifecycle method:\"), React.createElement(Code, {\n    code: \"\\n  componentDidMount = () => this.getCat();\\n\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"updating-the-render\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Updating the render\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Now that we have the photo in our state we can render that instead of our static image.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Right now we have this:\"), React.createElement(Code, {\n    language: \"markup\",\n    code: \"\\n<img\\n  className=\\\"cat-image\\\"\\n  src=\\\"https://catis.life/placeholder/400\\\"\\n  alt=\\\"An awesome cat\\\"\\n/>\\n  \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"  But we want to substitute the src with a variable from the state so we need to interpolate and in React we do that by wrapping the property value in \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"{}\"), \".\"), React.createElement(Code, {\n    language: \"markup\",\n    code: \"\\n<img\\n  className=\\\"cat-image\\\"\\n  src={this.state.currentCat}\\n  alt=\\\"An awesome cat\\\"\\n/>\\n  \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"You should now have a new cat being loaded every time you load the page \\uD83C\\uDF89\"));\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_default, \"default\", \"/Users/manjuladube/Documents/linaframework-docs/docs/4-get-cat.mdx\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/manjuladube/Documents/linaframework-docs/docs/4-get-cat.mdx"],"names":["React","MDXTag","Code","components","props"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import Code from '../components/code'\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\"  components={components}>\n<MDXTag name=\"p\" components={components}>{`The only endpoint we care about is the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`/cat`}</MDXTag>{` that will give us a random cat for each API call we make.`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.catis.life/cat\"}}>{`https://www.catis.life/cat`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"call-this-api\"}}>{`Call this API`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For this we are going to use the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://developers.google.com/web/updates/2015/03/introduction-to-fetch\"}}>{`fetch API`}</MDXTag>{` and get our data from the API we said at the top. So let's create a function to do that in our `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`index.js`}</MDXTag></MDXTag>\n<Code code={`\nclass App extends React.Component {\n  getCat = () => {\n    fetch(\"https://www.catis.life/cat\")\n      .then(data => data.json())\n      .then(rsp => this.setState({ cat: rsp.cat }));\n  };\n  \\n\n  ....\n}\n`} />\n<MDXTag name=\"p\" components={components}>{`What we did here is that we create a function using the arrow syntax so that this is automatically binded to the class and we can set the state of our application inside of it.`}</MDXTag>\n<Code code={`\n    fetch(\"https://www.catis.life/cat\")\n      .then(data => data.json())\n      .then(rsp => this.setState({ currentCat: rsp.cat }));\n`} />\n<MDXTag name=\"p\" components={components}>{`After we call the fetch we then transform what we receive to json to use it better in our app and once that is done we use a function called setState.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`What this function does is that is changes the state of our component and in this case the component is our whole App.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`But as you can see we have no state defined and in these cases we should always have a base state to be able to update it without a problem.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`To add state to our file add this before the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getCat`}</MDXTag>{` function:`}</MDXTag>\n<Code code={`\n  state = {\n    currentCat: null\n  };\n`} />\n<MDXTag name=\"p\" components={components}>{`This will tell React that it should start with that part of the state as null and we will manipulate it later and we do it by assigning it to the image url we get from the API.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"call-the-getcat-on-page-load\"}}>{`Call the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"h2\">{`getCat`}</MDXTag>{` on page load`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`So we have a function but so far we are not actually calling it anywhere so we don't actually have that cat image url.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`To fully grasp this you should know that React has lifecycle methods and this means you can run functions on several moments of the component creation and life.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can check out the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://reactjs.org/docs/react-component.html#the-component-lifecycle\"}}>{`docs`}</MDXTag>{` for a full list of all the lifecycle methods available but for now let's talk about three:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`componentDidMount`}</MDXTag>{` - is invoked immediately after a component is mounted. If you need to load data from a remote endpoint, this is a good place to instantiate the network request.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`componentDidUpdate`}</MDXTag>{` - is invoked immediately after updating occurs. This method is not called for the initial render.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`componentWillUnmount`}</MDXTag>{` -  is invoked immediately before a component is unmounted and destroyed.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`As you can see from this description what we want for this case is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`componentDidMount`}</MDXTag>{` and inside of it we call the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getCat`}</MDXTag>{` we created.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`After the function we create our lifecycle method:`}</MDXTag>\n<Code code={`\n  componentDidMount = () => this.getCat();\n`} />\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"updating-the-render\"}}>{`Updating the render`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now that we have the photo in our state we can render that instead of our static image.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Right now we have this:`}</MDXTag>\n<Code\n  language=\"markup\"\n  code={`\n<img\n  className=\"cat-image\"\n  src=\"https://catis.life/placeholder/400\"\n  alt=\"An awesome cat\"\n/>\n  `} />\n<MDXTag name=\"p\" components={components}>{`  But we want to substitute the src with a variable from the state so we need to interpolate and in React we do that by wrapping the property value in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`{}`}</MDXTag>{`.`}</MDXTag>\n<Code\n  language=\"markup\"\n  code={`\n<img\n  className=\"cat-image\"\n  src={this.state.currentCat}\n  alt=\"An awesome cat\"\n/>\n  `} />\n<MDXTag name=\"p\" components={components}>{`You should now have a new cat being loaded every time you load the page 🎉`}</MDXTag></MDXTag>\n  "]}]}