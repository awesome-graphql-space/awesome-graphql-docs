{"remainingRequest":"/Users/manjuladube/Documents/linaframework-docs/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/manjuladube/Documents/linaframework-docs/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/manjuladube/Documents/linaframework-docs/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/manjuladube/Documents/linaframework-docs/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheDirectory\":true,\"cacheCompression\":false,\"compact\":false}!/Users/manjuladube/Documents/linaframework-docs/docs/7-refactor-render.mdx","dependencies":[{"path":"/Users/manjuladube/Documents/linaframework-docs/docs/7-refactor-render.mdx","mtime":1542312328000},{"path":"/Users/manjuladube/Documents/linaframework-docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/manjuladube/Documents/linaframework-docs/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/manjuladube/Documents/linaframework-docs/docs/7-refactor-render.mdx\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\nimport Code from '../components/code';\n\nvar _default = function _default(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components,\n    props: {\n      \"id\": \"refactor-render\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \"Refactor Render\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"Right now in our render function we are getting plenty of things from the state and calling it as \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"this.state.key\"), \" and this can get pretty messy after a while so it would be a good idea to get the keys that we actually use and deconstruct it from the state.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"This will make our code more readable and maintainable once you get more and more things from the state.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Right now our render function looks like this:\"), React.createElement(Code, {\n    code: \"\\nrender() {\\n  return (\\n    <main>\\n      <section className=\\\"cat-wrapper\\\">\\n        <h1>Choose your favorite cats</h1>\\n        <section className=\\\"cat-container\\\">\\n          <figure>\\n            <img\\n              className=\\\"cat-image\\\"\\n              src={this.state.currentCat}\\n              alt=\\\"A awesome akita cat\\\"\\n            />\\n          </figure>\\n          <ul className=\\\"cat-actions\\\">\\n            <li>\\n              <button\\n                onClick={() => this.favoriteCat(this.state.currentCat)}\\n                className=\\\"heart-icon\\\"\\n              >\\n                <GoHeart size=\\\"30\\\" color=\\\"#f44336\\\" />\\n              </button>\\n            </li>\\n            <li>\\n              <button onClick={this.getCat}>\\n                <GoArrowRight size=\\\"30\\\" />\\n              </button>\\n            </li>\\n          </ul>\\n        </section>\\n        <ul className=\\\"favorite-cats\\\">\\n          {this.state.favoriteCats.map((cat, index) => (\\n            <li>\\n              <img class=\\\"favorite-cat\\\" src={cat} alt=\\\"favorited cat\\\" />\\n              <button onClick={() => this.removeFavorite(index)}>\\n                <GoTrashcan size=\\\"20\\\" />\\n              </button>\\n            </li>\\n          ))}\\n        </ul>\\n      </section>\\n    </main>\\n  );\\n}\\n\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"One thing that we can do here is extract \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"currentCat\"), \" and \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"favoriteCats\"), \" from the state using ES6 deconstruction like this:\"), React.createElement(Code, {\n    code: \"\\nconst { currentCat, favoriteCats } = this.state;\\n\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"This means that now we can target these pieces of state by only using \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"currentCat\"), \" and \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"favoriteCats\"), \". Our render will now look like:\"), React.createElement(Code, {\n    code: \"\\nrender() {\\n  const { currentCat, favoriteCats } = this.state;\\n  return (\\n    <main>\\n      <section className=\\\"cat-wrapper\\\">\\n        <h1>Choose your favorite cats</h1>\\n        <section className=\\\"cat-container\\\">\\n          <figure>\\n            <img\\n              className=\\\"cat-image\\\"\\n              src={currentCat}\\n              alt=\\\"A awesome akita cat\\\"\\n            />\\n          </figure>\\n          <ul className=\\\"cat-actions\\\">\\n            <li>\\n              <button\\n                onClick={() => this.favoriteCat(currentCat)}\\n                className=\\\"heart-icon\\\"\\n              >\\n                <GoHeart size=\\\"30\\\" color=\\\"#f44336\\\" />\\n              </button>\\n            </li>\\n            <li>\\n              <button onClick={this.getCat}>\\n                <GoArrowRight size=\\\"30\\\" />\\n              </button>\\n            </li>\\n          </ul>\\n        </section>\\n        <ul className=\\\"favorite-cats\\\">\\n          {favoriteCats.map((cat, index) => (\\n            <li>\\n              <img class=\\\"favorite-cat\\\" src={cat} alt=\\\"favorited cat\\\" />\\n              <button onClick={() => this.removeFavorite(index)}>\\n                <GoTrashcan size=\\\"20\\\" />\\n              </button>\\n            </li>\\n          ))}\\n        </ul>\\n      </section>\\n    </main>\\n  );\\n}\\n\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"And now our render function is completely separated from our state.\"));\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_default, \"default\", \"/Users/manjuladube/Documents/linaframework-docs/docs/7-refactor-render.mdx\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/manjuladube/Documents/linaframework-docs/docs/7-refactor-render.mdx"],"names":["React","MDXTag","Code","components","props"],"mappings":";;;;;;;;;;;;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;eAEa;AAAA,MAAEC,UAAF,QAAEA,UAAF;AAAA,MAAiBC,KAAjB;;AAAA,SAA4B,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAwB,IAAA,UAAU,EAAED,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAC3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAkB,IAAA,UAAU,EAAEA,UAA9B;AAA0C,IAAA,KAAK,EAAE;AAAC,YAAK;AAAN,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAD2C,EAE3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2GAA+I,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,YAAb;AAA0B,IAAA,UAAU,EAAEA,UAAtC;AAAkD,IAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA/I,oJAF2C,EAG3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gHAH2C,EAI3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAJ2C,EAK3C,oBAAC,IAAD;AAAM,IAAA,IAAI,0xCAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAL2C,EAkD3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAAsF,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,YAAb;AAA0B,IAAA,UAAU,EAAEA,UAAtC;AAAkD,IAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAtF,WAAuL,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,YAAb;AAA0B,IAAA,UAAU,EAAEA,UAAtC;AAAkD,IAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAvL,wDAlD2C,EAmD3C,oBAAC,IAAD;AAAM,IAAA,IAAI,wDAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnD2C,EAsD3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EAAmH,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,YAAb;AAA0B,IAAA,UAAU,EAAEA,UAAtC;AAAkD,IAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAnH,WAAoN,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,YAAb;AAA0B,IAAA,UAAU,EAAEA,UAAtC;AAAkD,IAAA,UAAU,EAAC,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAApN,qCAtD2C,EAuD3C,oBAAC,IAAD;AAAM,IAAA,IAAI,6yCAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvD2C,EAqG3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,UAAU,EAAEA,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EArG2C,CAA5B;AAAA,C;;AAAf","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import Code from '../components/code'\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\"  components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"refactor-render\"}}>{`Refactor Render`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Right now in our render function we are getting plenty of things from the state and calling it as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`this.state.key`}</MDXTag>{` and this can get pretty messy after a while so it would be a good idea to get the keys that we actually use and deconstruct it from the state.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This will make our code more readable and maintainable once you get more and more things from the state.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Right now our render function looks like this:`}</MDXTag>\n<Code code={`\nrender() {\n  return (\n    <main>\n      <section className=\"cat-wrapper\">\n        <h1>Choose your favorite cats</h1>\n        <section className=\"cat-container\">\n          <figure>\n            <img\n              className=\"cat-image\"\n              src={this.state.currentCat}\n              alt=\"A awesome akita cat\"\n            />\n          </figure>\n          <ul className=\"cat-actions\">\n            <li>\n              <button\n                onClick={() => this.favoriteCat(this.state.currentCat)}\n                className=\"heart-icon\"\n              >\n                <GoHeart size=\"30\" color=\"#f44336\" />\n              </button>\n            </li>\n            <li>\n              <button onClick={this.getCat}>\n                <GoArrowRight size=\"30\" />\n              </button>\n            </li>\n          </ul>\n        </section>\n        <ul className=\"favorite-cats\">\n          {this.state.favoriteCats.map((cat, index) => (\n            <li>\n              <img class=\"favorite-cat\" src={cat} alt=\"favorited cat\" />\n              <button onClick={() => this.removeFavorite(index)}>\n                <GoTrashcan size=\"20\" />\n              </button>\n            </li>\n          ))}\n        </ul>\n      </section>\n    </main>\n  );\n}\n`}/>\n<MDXTag name=\"p\" components={components}>{`One thing that we can do here is extract `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`currentCat`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`favoriteCats`}</MDXTag>{` from the state using ES6 deconstruction like this:`}</MDXTag>\n<Code code={`\nconst { currentCat, favoriteCats } = this.state;\n`}/>\n<MDXTag name=\"p\" components={components}>{`This means that now we can target these pieces of state by only using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`currentCat`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`favoriteCats`}</MDXTag>{`. Our render will now look like:`}</MDXTag>\n<Code code={`\nrender() {\n  const { currentCat, favoriteCats } = this.state;\n  return (\n    <main>\n      <section className=\"cat-wrapper\">\n        <h1>Choose your favorite cats</h1>\n        <section className=\"cat-container\">\n          <figure>\n            <img\n              className=\"cat-image\"\n              src={currentCat}\n              alt=\"A awesome akita cat\"\n            />\n          </figure>\n          <ul className=\"cat-actions\">\n            <li>\n              <button\n                onClick={() => this.favoriteCat(currentCat)}\n                className=\"heart-icon\"\n              >\n                <GoHeart size=\"30\" color=\"#f44336\" />\n              </button>\n            </li>\n            <li>\n              <button onClick={this.getCat}>\n                <GoArrowRight size=\"30\" />\n              </button>\n            </li>\n          </ul>\n        </section>\n        <ul className=\"favorite-cats\">\n          {favoriteCats.map((cat, index) => (\n            <li>\n              <img class=\"favorite-cat\" src={cat} alt=\"favorited cat\" />\n              <button onClick={() => this.removeFavorite(index)}>\n                <GoTrashcan size=\"20\" />\n              </button>\n            </li>\n          ))}\n        </ul>\n      </section>\n    </main>\n  );\n}\n`}/>\n<MDXTag name=\"p\" components={components}>{`And now our render function is completely separated from our state.`}</MDXTag></MDXTag>\n  "]}]}